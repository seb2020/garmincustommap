# Names of administrative boundaries.
# We could want to sort the relations in ascending order of admin_level
# and alphabetically by name first.
# Currently, the matching relations will be processed and the names
# appended to the boundary lines in an arbitrary order.
(type=boundary | type=multipolygon) & boundary=administrative & name=*
{ apply
  {
    set mkgmap:boundary_name='$(mkgmap:boundary_name)/${name}' | '${name}';
  }
}

# European E-Road network
route=road & network=e-road { apply { add ref='${ref}'; add int_ref='${int_ref'}; add network=e-road }

# Public transportation routes.
# We could want to sort the matching relations by ref first.
type=route
& (route=bus|route=trolleybus|route=ferry|route=subway|route=train|route=tram)
& (ref=* | name=*)
{
  add ref='${name}'; # if ref is missing, use name
  # Append the ref of the route relation to the route_ref attribute of
  # the member nodes recursively (even to members of subrelations).
  # Stops can be grouped within subrelations comprising the vehicle
  # stop node and the passenger wait node.
  apply { # node role ~ '(start_|end_)stop'
    set route_ref='$(route_ref),${ref}' | '${ref}';

    # In route relations, stops may be defined as relations that group
    # the passenger wait area and the vehicle stop area.  If such
    # subrelations exist, copy the ref to them too.
    set mkgmap:relref='${ref}';

    apply role=passengers {
      set route_ref='$(route_ref),${mkgmap:relref}' | '${mkgmap:relref}';
    }

    delete mkgmap:relref;
  }
  # We could want to copy the route relation name to unnamed route=ferry ways.
  # apply way { add name='${name}' }
}

# ICE-Strecken
route=train & service=high_speed { apply{ add highspeedtrain=yes} }

# GroÃŸe FlÃ¼sse
(waterway=river | waterway=canal) & (ref:fgkz ~ '\d{1,3}' | CEMT ~ '^[V].{1,2}' )  { apply {add fluss=yes} }


# CHEMIN
type=route & route ~ '(foot|hiking)' & via_ferrata_scale!=*  
{ apply
	{
    	add c_route_hiking = yes;
	}
}

# CHEMIN MTB
type=route & route ~ '(mtb)' & via_ferrata_scale!=*  
{ apply
	{
    	add c_route_mtb = yes;
	}
}

# PR
type=route & route ~ '(foot|hiking)' & network=lwn & via_ferrata_scale!=*  & osmc:symbol ~ 'yellow:white:yellow_bar.*' 
{ apply
	{
		set osmc:symbol='$(osmc:symbol)';
		set network='${network}';
    	add c_route_pr = yes;
	}
}

#GRP
if (name ~ '[Gg][Rr][Pp].*') then
	type=route & route ~ '(foot|hiking)' & network ~ '(iwn|nwn|rwn)'  & via_ferrata_scale!=*  & osmc:symbol ~ 'red:yellow:red_lower.*'
	{ apply
		{
			set osmc:symbol='${osmc:symbol}';
			set network='${network}';
			add c_route_grp = yes;
			set GRP='$(GR) - $(GRP) - ${name}'|
			'$(GR) - ${name}'|
			'$(GRP) - ${name}'|
			'${name}';
		}
	}
else
	type=route & route ~ '(foot|hiking)' & network ~ '(iwn|nwn|rwn)'  & via_ferrata_scale!=*  & osmc:symbol ~ 'red:yellow:red_lower.*'
	{ apply
		{
			set osmc:symbol='${osmc:symbol}';
			set network='${network}';
			add c_route_grp = yes;
			set GRP='$(GR) - $(GRP) - GRP ${name}'|
			'$(GR) - GRP ${name}'|
			'$(GRP) - GRP ${name}'|
			'GRP ${name}';
		}
	}
end

#GR
if ( ref ~ '[Gg][Rr]\s*[0-9]+.*') then
	type=route & route ~ '(foot|hiking)' & network ~ '(iwn|nwn|rwn)' & via_ferrata_scale!=* 	
	{ apply
		{
			set osmc:symbol='${osmc:symbol}';
			set network='$(network)';
			set c_route_gr = yes;
			set GR='$(GR) - ${ref} - $(GRP)'|
			'$(GR) - ${ref}'|
			'${ref} - $(GRP)'|
			'${ref}';
		}
	}

else

	type=route & route ~ '(foot|hiking)' & network ~ '(iwn|nwn|rwn)' & via_ferrata_scale!=* & osmc:symbol ~ 'red:white:red_lower:.*' 	
	{ apply
		{
			set osmc:symbol='${osmc:symbol}';
			set network='$(network)';
			set c_route_gr = yes;
			set GR='$(GR) - GR ${osmc:symbol|subst:":=>#"|part:"#:4"} - $(GRP)'|
			'$(GR) - GR ${osmc:symbol|subst:":=>#"|part:"#:4"}'|
			'GR ${osmc:symbol|subst:":=>#"|part:"#:4"} - $(GRP)'|
			'GR ${osmc:symbol|subst:":=>#"|part:"#:4"}';
		}
	}
end
